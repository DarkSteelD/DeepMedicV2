stages:
  - lint
  - data-validation
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONPATH: "$CI_PROJECT_DIR/src"

cache:
  paths:
    - .cache/pip/

before_script:
  - python --version
  - pip install --upgrade pip
  - pip install -r requirements.txt

lint:
  stage: lint
  image: python:3.9
  script:
    - pip install flake8 black isort mypy
    - flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    - black --check src/ tests/ --line-length=100
    - isort --check-only src/ tests/ --profile=black
    - mypy src/ --ignore-missing-imports
  allow_failure: true
  only:
    - develop
    - main
    - merge_requests

dvc-data-check:
  stage: data-validation
  image: python:3.9
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install dvc pandas scikit-learn lightgbm mlflow
    - apt-get update && apt-get install -y git
  script:
    - dvc --version
    - ls -la data/
    - |
      if [ -f "data/raw/winequality-red.csv.dvc" ]; then
        dvc status data/raw/winequality-red.csv.dvc || true
      else
        echo "DVC data file not found"
        exit 1
      fi
    - |
      if [ -f "models.dvc" ]; then
        dvc status models.dvc || true
      else
        echo "DVC models file not found"
        exit 1
      fi
    - |
      python -c "
      import pandas as pd
      import os
      
      data_file = 'data/raw/winequality-red.csv'
      if os.path.exists(data_file):
          df = pd.read_csv(data_file, sep=';')
          print(f'Data loaded successfully: {df.shape}')
          expected_cols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 
                          'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 
                          'density', 'pH', 'sulphates', 'alcohol', 'quality']
          if all(col in df.columns for col in expected_cols):
              print('All expected columns present')
          else:
              print('Missing columns')
              exit(1)
      else:
          print('Data file not accessible, but DVC metadata exists')
      
      if os.path.exists('rf_model.pkl'):
          print('RandomForest model file found')
      if os.path.exists('lgb_model.txt'):  
          print('LightGBM model file found')
      "
  allow_failure: false
  only:
    - develop
    - main
    - merge_requests

api-tests:
  stage: test
  image: python:3.9
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - export PYTHONPATH="$CI_PROJECT_DIR/src:$PYTHONPATH"
  script:
    - python -m pytest tests/test_api.py -v --tb=short
    - |
      python -c "
      import sys
      sys.path.append('src')
      from fastapi.testclient import TestClient
      from api.app import app
      
      client = TestClient(app)
      
      response = client.get('/')
      assert response.status_code == 200
      print('Root endpoint works')
      
      response = client.get('/healthcheck')
      assert response.status_code == 200
      print('Healthcheck endpoint works')
      
      response = client.get('/model-info')
      if response.status_code in [200, 500]:
          print('Model info endpoint accessible')
      else:
          print(f'Model info returned {response.status_code}')
      
      response = client.get('/docs')
      assert response.status_code == 200
      print('API documentation accessible')
      
      print('All API endpoint tests passed')
      "
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      junit: pytest-report.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  allow_failure: false
  only:
    - develop
    - main
    - merge_requests

security-scan:
  stage: test
  image: python:3.9
  script:
    - pip install safety bandit
    - safety check --json || echo "Security check completed with warnings"
    - bandit -r src/ -f json || echo "Bandit scan completed"
  allow_failure: true
  only:
    - develop
    - main
    - merge_requests

deploy-staging:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
    - echo "Would deploy to staging environment"
    - echo "Docker build and deploy commands would go here"
  when: manual
  only:
    - develop

deploy-production:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
    - echo "Would deploy to production environment"
    - echo "Docker build and deploy commands would go here"
  when: manual
  only:
    - main 